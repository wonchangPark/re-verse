/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import * as THREE from "three";
import React, { useEffect, useRef, useState } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import GLTFLoader from "gltfjsx/src/utils/glftLoader";
import { useFrame } from "@react-three/fiber";

import { useDispatch } from "react-redux";
import { setCampfireOn } from "../../modules/reverse";
import { useBox } from "@react-three/cannon";

export default function CatAnimations({
  // action,
  // handleCurrentPosition,
  destinationPoint,
  handleVisible, // test object event handler
  handleEvent, // travel, anniv, diary event handler
}) {
  const group = useRef();
  // const [group] = useBox(() => ({
  //   mass: 1,
  //   args: [2, 1, 2],
  //   position: [destinationPoint.x, 0, destinationPoint.z],
  // }));
  // const previousAction = usePrevious(action);
  const { nodes, materials, animations } = useGLTF(
    "/assets/animals/GLTF/Animations/Cat_Animations.gltf"
  );
  // console.log(nodes);
  const { actions } = useAnimations(animations, group);
  // console.log(actions);
  const [moving, setMoving] = useState(false);
  let angle = 0;

  // 이벤트 발생할 오브젝트의 좌표
  const objectPosition = new THREE.Vector3(-20, 0.01, 3);
  // console.log(objectPosition);
  // const [visible, setVisible] = useState(false);

  //// 여행 포토북, 글 보기 오브젝트 이벤트
  // FIXME: 그냥 다른 에셋에 적용할거임
  // const travelPosition = new THREE.Vector3(37, 0.01, -68);

  const dispatch = useDispatch();
  const campfirePosition = new THREE.Vector3(37, 0.01, -68);

  const [ref, api] = useBox(() => ({
    rotation: [Math.PI / 4, 0, Math.PI / 4],
    mass: 1,
    args: [2, 1, 2],
    // type: "Dynamic",
    // args: [1, 5, 1],
    position: [destinationPoint.x, 1, destinationPoint.z],
  }));

  //   const realRef = useRef(ref);

  useEffect(() => {
    if (destinationPoint) {
      setMoving(true);
      // console.log(group.current); // player.modelmesh
      group.current.lookAt(destinationPoint);
      group.current.name = "mememememe";

      // console.log(group.current);
    }
  }, [destinationPoint]);
  useFrame((state) => {
    actions["Idle_A"].play();
    if (group.current) {
      state.camera.lookAt(group.current.position);
    }

    if (group.current) {
      if (moving) {
        angle = Math.atan2(
          destinationPoint.z - group.current.position.z,
          destinationPoint.x - group.current.position.x
        );
        group.current.position.x += Math.cos(angle) * 0.065;
        group.current.position.z += Math.sin(angle) * 0.065;
        api.position.set(group.current.position.x, 0, group.current.position.z);
        state.camera.position.x = 1 + group.current.position.x;
        state.camera.position.z = 5 + group.current.position.z;

        actions["Idle_A"].stop();
        actions["Walk"].play();
        // console.log("우리 고양이 걷는다");
        // console.log(destinationPoint);
        // console.log(group.current.position);
        // console.log(Math.cos(angle) * 0.065);
        if (
          Math.abs(destinationPoint.x - group.current.position.x) < 0.03 &&
          Math.abs(destinationPoint.z - group.current.position.z) < 0.03
        ) {
          setMoving(false);
          actions["Walk"].stop();
          actions["Idle_A"].play();
          // console.log("우리 고양이 멈춘다");
        }

        // 오브젝트 visible event
        if (
          Math.abs(objectPosition.x - group.current.position.x) < 4 &&
          Math.abs(objectPosition.z - group.current.position.z) < 4
        ) {
          handleVisible(true);
        } else {
          handleVisible(false);
        }

        // travel zone, campfire animation
        if (
          Math.abs(campfirePosition.x - group.current.position.x) < 17 &&
          Math.abs(campfirePosition.z - group.current.position.z) < 12
        ) {
          dispatch(setCampfireOn(1));
        } else {
          dispatch(setCampfireOn(0));
        }
      }
    }
  });

  return (
    // <group ref={group} dispose={null}>
    <group>
      <group ref={group} dispose={null} position={[-30, 0, -30]}>
        <group name="Scene">
          <group name="Rig">
            <primitive object={nodes.root} />
            <skinnedMesh
              name="Cat"
              geometry={nodes.Cat.geometry}
              material={materials.M_Cat}
              skeleton={nodes.Cat.skeleton}
              morphTargetDictionary={nodes.Cat.morphTargetDictionary}
              morphTargetInfluences={nodes.Cat.morphTargetInfluences}
              // 그림자 설정은 여기에!
              castShadow
              receiveShadow
            />
          </group>
        </group>
      </group>
      <mesh ref={ref} castShadow={true}>
        <boxGeometry args={[2, 2, 2]} />
        <meshLambertMaterial color={"hotpink"} />
      </mesh>
    </group>
  );
}

useGLTF.preload("/Cat_Animations.gltf");

function usePrevious(value) {
  const ref = useRef();
  useEffect(() => {
    ref.current = value;
  }, [value]);
  return ref.current;
}
